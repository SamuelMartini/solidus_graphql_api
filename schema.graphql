"""
        The `Spree::Address` model is used to track address information for customers.
        Addresses are consumed by `Spree::Orders`, `Spree::Shipments`, and `Spree::Cartons`.

        More at [Solidus Guide](https://guides.solidus.io/developers/users/addresses.html#addresses)
"""
type Address implements Node {
  address1: String!
  address2: String
  alternativePhone: String
  city: String!
  company: String
  country: Country!
  createdAt: ISO8601DateTime
  firstname: String!
  id: ID!
  lastname: String
  phone: String!
  state: State
  stateName: String
  updatedAt: ISO8601DateTime
  zipcode: String!
}

"""
The connection type for Address.
"""
type AddressConnection {
  """
  A list of edges.
  """
  edges: [AddressEdge]

  """
  A list of nodes.
  """
  nodes: [Address]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type AddressEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Address
}

"""
Address.
"""
input AddressInput {
  address1: String!
  address2: String
  alternativePhone: String
  city: String!
  company: String
  countryId: ID!
  firstname: String!
  lastname: String
  phone: String!
  stateId: ID
  stateName: String
  zipcode: String!
}

"""
        Countries and states can affect both taxation and shipping on orders.
        So, an address must always link to a `Spree::Country` object.

        More at [Solidus Guide](https://guides.solidus.io/developers/users/addresses.html#countries-and-states)
"""
type Country implements Node {
  createdAt: ISO8601DateTime
  id: ID!
  iso: String!
  iso3: String!
  isoName: String!
  name: String!
  numcode: Int!
  states(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): StateConnection!
  statesRequired: Boolean!
  updatedAt: ISO8601DateTime
}

"""
The connection type for Country.
"""
type CountryConnection {
  """
  A list of edges.
  """
  edges: [CountryEdge]

  """
  A list of nodes.
  """
  nodes: [Country]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type CountryEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Country
}

"""
       If your payment processing integration uses the `Spree::CreditCard` class for its payment source,
       take note that this model does not store all of the payment details.

        More at [Solidus Guide](https://guides.solidus.io/developers/payments/payment-sources.html#credit-cards)
"""
type CreditCard implements Node & PaymentSource {
  address: Address!
  ccType: String!
  createdAt: ISO8601DateTime
  id: ID!
  lastDigits: String!
  month: String!
  name: String!
  paymentMethod: PaymentMethod!
  updatedAt: ISO8601DateTime
  year: String!
}

"""
Currency.
"""
type Currency implements Node {
  htmlEntity: String!
  id: ID!
  isoCode: String!
  name: String!
  symbol: String!
}

"""
The connection type for Currency.
"""
type CurrencyConnection {
  """
  A list of edges.
  """
  edges: [CurrencyEdge]

  """
  A list of nodes.
  """
  nodes: [Currency]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type CurrencyEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Currency
}

"""
An ISO 8601-encoded datetime
"""
scalar ISO8601DateTime

"""
Image.
"""
type Image implements Node {
  alt: String
  createdAt: ISO8601DateTime
  filename: String!
  id: ID!
  largeUrl: String!
  miniUrl: String!
  position: Int!
  productUrl: String!
  smallUrl: String!
  updatedAt: ISO8601DateTime
}

"""
The connection type for Image.
"""
type ImageConnection {
  """
  A list of edges.
  """
  edges: [ImageEdge]

  """
  A list of nodes.
  """
  nodes: [Image]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type ImageEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Image
}

"""
        The `Spree::LineItem` model provides the cost of each item added to an order.
        Line items provide a link between the order and Spree::Products and `Spree::Variants`.

        More at [Solidus Guide](https://guides.solidus.io/developers/orders/overview.html#line-items)
"""
type LineItem implements Node {
  additionalTaxTotal: Float!
  adjustmentTotal: Float!
  amount: Float!
  createdAt: ISO8601DateTime
  currency: String!
  hasSufficientStock: Boolean!
  id: ID!
  includedTaxTotal: Float!
  price: Float!
  promoTotal: Float!
  quantity: Int!
  updatedAt: ISO8601DateTime
  variant: Variant!
}

"""
The connection type for LineItem.
"""
type LineItemConnection {
  """
  A list of edges.
  """
  edges: [LineItemEdge]

  """
  A list of nodes.
  """
  nodes: [LineItem]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type LineItemEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: LineItem
}

type Mutation {
  removeFromAddressBook(input: RemoveFromAddressBookInput!): RemoveFromAddressBookPayload
  saveInAddressBook(input: SaveInAddressBookInput!): SaveInAddressBookPayload
  signIn(input: SignInInput!): SignInPayload
}

"""
An object with an ID.
"""
interface Node {
  """
  ID of the object.
  """
  id: ID!
}

"""
        The `Spree::OptionType` model is used to define variants for a product.

        More at [Solidus Guide](https://guides.solidus.io/developers/products-and-variants/variants.html#option-types)
"""
type OptionType implements Node {
  createdAt: ISO8601DateTime
  id: ID!
  name: String!
  optionValues(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): OptionValueConnection!
  position: Int!
  presentation: String!
  updatedAt: ISO8601DateTime
}

"""
The connection type for OptionType.
"""
type OptionTypeConnection {
  """
  A list of edges.
  """
  edges: [OptionTypeEdge]

  """
  A list of nodes.
  """
  nodes: [OptionType]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type OptionTypeEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: OptionType
}

"""
        The option type requires at least one associated `Spree::OptionValue` to be used.
        For example, your "Color" option type might have ten or one hundred option values.

        More at [Solidus Guide](https://guides.solidus.io/developers/products-and-variants/variants.html#option-types)
"""
type OptionValue implements Node {
  createdAt: ISO8601DateTime
  id: ID!
  name: String!
  position: String!
  presentation: String!
  updatedAt: ISO8601DateTime
}

"""
The connection type for OptionValue.
"""
type OptionValueConnection {
  """
  A list of edges.
  """
  edges: [OptionValueEdge]

  """
  A list of nodes.
  """
  nodes: [OptionValue]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type OptionValueEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: OptionValue
}

"""
        The `Spree::Order` model is one of the key models in Solidus.
        It provides a central place around which to collect information about a customer order.

        More at [Solidus Guide](https://guides.solidus.io/developers/orders/overview.html)
"""
type Order implements Node {
  additionalTaxTotal: String!
  adjustmentTotal: String!
  approvedAt: ISO8601DateTime
  billingAddress: Address!
  canceledAt: ISO8601DateTime
  completedAt: ISO8601DateTime
  confirmationDelivered: Boolean!
  createdAt: ISO8601DateTime
  currency: String!
  email: String!
  guestToken: String
  id: ID!
  includedTaxTotal: String!
  itemTotal: String!
  lineItems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): LineItemConnection!
  number: String!
  paymentState: String!
  paymentTotal: String!
  promoTotal: String!
  shipmentState: String!
  shipmentTotal: String!
  shippingAddress: Address!
  specialInstructions: String
  state: String!
  total: String!
  updatedAt: ISO8601DateTime
}

"""
The connection type for Order.
"""
type OrderConnection {
  """
  A list of edges.
  """
  edges: [OrderEdge]

  """
  A list of nodes.
  """
  nodes: [Order]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type OrderEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Order
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String

  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!

  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
}

"""
        A store may have multiple `Spree::PaymentMethods` configured.
        Payment methods send payment information to a payment service provider.

        More at [Solidus Guide](https://guides.solidus.io/developers/payments/payment-methods.html#payment-methods)
"""
type PaymentMethod implements Node {
  createdAt: ISO8601DateTime
  description: String
  id: ID!
  name: String!
  position: String!
  updatedAt: ISO8601DateTime
}

"""
          Each `Spree::Payment` object has optional `source_type` and `source_id`
attributes that point to a payment source model. 
          The listed source type is supplied by the `Spree::PaymentMethod` being used.

          More at [Solidus Guide](https://guides.solidus.io/developers/payments/payment-sources.html)
"""
interface PaymentSource {
  createdAt: ISO8601DateTime
  paymentMethod: PaymentMethod!
  updatedAt: ISO8601DateTime
}

"""
        A store may have multiple `Spree::PaymentMethods` configured.
        Payment methods send payment information to a payment service provider.

        More at [Solidus Guide](https://guides.solidus.io/developers/payments/payment-methods.html#payment-methods)
"""
type Price implements Node {
  amount: String!
  countryIso: String
  createdAt: ISO8601DateTime
  currency: Currency!
  displayAmount: String!
  displayCountry: String!
  id: ID!
  updatedAt: ISO8601DateTime
}

"""
The connection type for Price.
"""
type PriceConnection {
  """
  A list of edges.
  """
  edges: [PriceEdge]

  """
  A list of nodes.
  """
  nodes: [Price]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type PriceEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Price
}

"""
        `Spree::Products` track separate products within your store.

        More at [Solidus Guide](https://guides.solidus.io/developers/products-and-variants/products.html#products)
"""
type Product implements Node {
  createdAt: ISO8601DateTime
  description: String
  id: ID!
  masterVariant: Variant!
  metaDescription: String
  metaKeywords: String
  metaTitle: String
  name: String!
  optionTypes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): OptionTypeConnection!
  productProperties(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProductPropertyConnection!
  slug: String!
  updatedAt: ISO8601DateTime
  variants(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): VariantConnection!
}

"""
The connection type for Product.
"""
type ProductConnection {
  """
  A list of edges.
  """
  edges: [ProductEdge]

  """
  A list of nodes.
  """
  nodes: [Product]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type ProductEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Product
}

"""
        Product properties belong to the `Spree::ProductProperty` model. They track individual attributes for a product.

        More at [Solidus Guide](https://guides.solidus.io/developers/products-and-variants/product-properties.html#product-properties)
"""
type ProductProperty implements Node {
  createdAt: ISO8601DateTime
  id: ID!
  position: Int!
  property: Property
  updatedAt: ISO8601DateTime
  value: String
}

"""
The connection type for ProductProperty.
"""
type ProductPropertyConnection {
  """
  A list of edges.
  """
  edges: [ProductPropertyEdge]

  """
  A list of nodes.
  """
  nodes: [ProductProperty]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type ProductPropertyEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ProductProperty
}

"""
Params for searching products.
"""
input ProductsQueryInput {
  """
  Keywords
  """
  keywords: String

  """
  Search
  """
  search: RansackJson

  """
  Taxon
  """
  taxon: ID
}

"""
Property.
"""
type Property implements Node {
  createdAt: ISO8601DateTime
  id: ID!
  name: String!
  presentation: String!
  updatedAt: ISO8601DateTime
}

type Query {
  """
  Customer Completed Orders.
  """
  completedOrders(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): OrderConnection!

  """
  Supported Countries.
  """
  countries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): CountryConnection!

  """
  Current Order.
  """
  currentOrder: Order

  """
  Current Store.
  """
  currentStore: Store

  """
  Current logged User.
  """
  currentUser: User

  """
  Fetches an object given its ID.
  """
  node(
    """
    ID of the object.
    """
    id: ID!
  ): Node

  """
  Fetches a list of objects given a list of IDs.
  """
  nodes(
    """
    IDs of the objects.
    """
    ids: [ID!]!
  ): [Node]!

  """
  Find a product by its slug.
  """
  productBySlug(slug: String!): Product

  """
  Supported Products.
  """
  products(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    query: ProductsQueryInput
  ): ProductConnection!

  """
  Supported Taxonomies.
  """
  taxonomies(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): TaxonomyConnection!
}

"""
Represents untyped JSON
"""
scalar RansackJson

"""
Autogenerated input type of RemoveFromAddressBook
"""
input RemoveFromAddressBookInput {
  addressId: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of RemoveFromAddressBook
"""
type RemoveFromAddressBookPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  user: User
}

"""
Autogenerated input type of SaveInAddressBook
"""
input SaveInAddressBookInput {
  address: AddressInput!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  default: Boolean
}

"""
Autogenerated return type of SaveInAddressBook
"""
type SaveInAddressBookPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [UserError!]!
  user: User
}

"""
Autogenerated input type of SignIn
"""
input SignInInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  email: String!
  password: String!
}

"""
Autogenerated return type of SignIn
"""
type SignInPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]!
  user: User
}

"""
        Countries and states can affect both taxation and shipping on orders.
        So, an address must always link to a `Spree::Country` object.

        More at [Solidus Guide](https://guides.solidus.io/developers/users/addresses.html#countries-and-states)
"""
type State implements Node {
  abbr: String!
  createdAt: ISO8601DateTime
  id: ID!
  name: String!
  updatedAt: ISO8601DateTime
}

"""
The connection type for State.
"""
type StateConnection {
  """
  A list of edges.
  """
  edges: [StateEdge]

  """
  A list of nodes.
  """
  nodes: [State]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type StateEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: State
}

"""
Store.
"""
type Store implements Node {
  cartTaxCountryIso: String
  code: String!
  createdAt: ISO8601DateTime
  currencies(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): CurrencyConnection!
  default: Boolean!
  defaultCurrency: String
  id: ID!
  mailFromAddress: String!
  metaDescription: String
  metaKeywords: String
  name: String!
  seoTitle: String
  updatedAt: ISO8601DateTime
  url: String!
}

"""
        Taxonomies and taxons provide a robust way to classify and categorize products.
        They belong to the `Spree::Taxonomy` and `Spree:Taxon` models.

        More at [Solidus Guide](https://guides.solidus.io/developers/products-and-variants/taxonomies-and-taxons.html#taxonomies-and-taxons)
"""
type Taxon implements Node {
  children(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): TaxonConnection
  createdAt: ISO8601DateTime
  description: String
  iconUrl: String
  id: ID!
  metaDescription: String
  metaKeywords: String
  metaTitle: String
  name: String!
  parentTaxon: Taxon
  permalink: String!
  updatedAt: ISO8601DateTime
}

"""
The connection type for Taxon.
"""
type TaxonConnection {
  """
  A list of edges.
  """
  edges: [TaxonEdge]

  """
  A list of nodes.
  """
  nodes: [Taxon]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type TaxonEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Taxon
}

"""
        Taxonomies and taxons provide a robust way to classify and categorize products.
        They belong to the `Spree::Taxonomy` and `Spree:Taxon` models.

        More at [Solidus Guide](https://guides.solidus.io/developers/products-and-variants/taxonomies-and-taxons.html#taxonomies-and-taxons)
"""
type Taxonomy implements Node {
  createdAt: ISO8601DateTime
  id: ID!
  name: String!
  rootTaxon: Taxon
  taxons(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): TaxonConnection!
  updatedAt: ISO8601DateTime
}

"""
The connection type for Taxonomy.
"""
type TaxonomyConnection {
  """
  A list of edges.
  """
  edges: [TaxonomyEdge]

  """
  A list of nodes.
  """
  nodes: [Taxonomy]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type TaxonomyEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Taxonomy
}

"""
        Stores require a User model in order to take advantage of all of Solidus's features.

        More at [Solidus Guide](https://guides.solidus.io/developers/users/custom-authentication.html)
"""
type User implements Node {
  addresses(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): AddressConnection!
  billAddress: Address
  createdAt: ISO8601DateTime
  currentSignInAt: ISO8601DateTime
  defaultAddress: Address
  email: String!
  id: ID!
  lastSignInAt: ISO8601DateTime
  login: String
  shipAddress: Address
  signInCount: Int!
  spreeApiKey: String
  updatedAt: ISO8601DateTime
  wallet(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): WalletPaymentSourceConnection!
}

"""
A user-readable error
"""
type UserError {
  """
  A description of the error
  """
  message: String!

  """
  Which input value this error came from
  """
  path: [String!]
}

"""
        Spree:Variants track the distinct properties of multiple similar products that you sell.

        More at [Solidus Guide](https://guides.solidus.io/developers/products-and-variants/variants.html#variants)
"""
type Variant implements Node {
  createdAt: ISO8601DateTime
  defaultPrice: Price!
  depth: String
  height: String
  id: ID!
  images(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ImageConnection!
  isMaster: Boolean!
  optionValues(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): OptionValueConnection!
  position: Int!
  prices(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PriceConnection!
  sku: String!
  updatedAt: ISO8601DateTime
  weight: String!
  width: String
}

"""
The connection type for Variant.
"""
type VariantConnection {
  """
  A list of edges.
  """
  edges: [VariantEdge]

  """
  A list of nodes.
  """
  nodes: [Variant]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type VariantEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Variant
}

"""
        Interface for accessing and updating a user's active "wallet".
        A Wallet is the *active* list of *reusable* payment sources that a user would like to
        choose from when placing orders.
"""
type WalletPaymentSource implements Node {
  createdAt: ISO8601DateTime
  default: Boolean!
  id: ID!
  paymentSource: PaymentSource
  updatedAt: ISO8601DateTime
}

"""
The connection type for WalletPaymentSource.
"""
type WalletPaymentSourceConnection {
  """
  A list of edges.
  """
  edges: [WalletPaymentSourceEdge]

  """
  A list of nodes.
  """
  nodes: [WalletPaymentSource]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type WalletPaymentSourceEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: WalletPaymentSource
}